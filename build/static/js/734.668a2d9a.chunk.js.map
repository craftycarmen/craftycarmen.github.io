{"version":3,"file":"static/js/734.668a2d9a.chunk.js","mappings":"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","sources":["shared/content/Content.tsx","shared/navbar/logo-type/LogoType.tsx","shared/color-mode-button/ColorModeButton.tsx","shared/navbar/drawer/Drawer.tsx","shared/navbar/Navbar.tsx","shared/socials/Socials.tsx","utils/Functions.ts"],"sourcesContent":["import { FC, useEffect, useState } from \"react\";\n\nimport { Text, Stack, StyleProps, Link, UnorderedList } from \"@chakra-ui/react\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport common from \"content/common/common.json\";\nimport landing from \"content/landing/landing-config.json\";\nimport featuredProjects from \"content/featured-projects/featured-projects-config.json\";\nimport otherProjects from \"content/other-projects/other-projects-config.json\";\nimport about from \"content/about/about-config.json\";\n\nimport LandingMd from \"content/landing/landing.md\";\nimport AboutMd from \"content/about/about.md\";\n\nexport const configs = {\n    common,\n    landing,\n    featuredProjects,\n    otherProjects,\n    about,\n};\n\ninterface State {\n    landing: string;\n    about: string;\n}\n\nexport enum MarkdownFile {\n    Landing = \"landing\",\n    About = \"about\",\n}\n\nconst Mapper = {\n    [MarkdownFile.Landing]: LandingMd,\n    [MarkdownFile.About]: AboutMd,\n};\n\nexport const useContent = (fileName: MarkdownFile) => {\n    const [data, setData] = useState<State>({ landing: \"\", about: \"\" });\n\n    useEffect(() => {\n        fetch(Mapper[fileName])\n            .then((res) => res.text())\n            .then((text) => setData((data) => ({ ...data, [fileName]: text })));\n    }, [fileName]);\n\n    return data;\n};\n\ninterface Props extends StyleProps {\n    children?: string;\n}\n\nexport const Content: FC<Props> = ({ children, ...rest }) => {\n    return (\n        <Stack spacing=\"4\">\n            <ReactMarkdown\n                components={{\n                    p: ({ node, ...props }) => <Text {...rest} {...props} />,\n                    a: ({ node, ...props }) => (\n                        <Link href={props.href} target=\"_blank\" color=\"primary.200\" {...props} />\n                    ),\n                    ul: ({ node, ...props }) => {\n                        const { ordered, ...rest } = props;\n\n                        return (\n                            <UnorderedList\n                                {...rest}\n                                data-aos=\"fade\"\n                                listStylePosition=\"inside\"\n                                display=\"grid\"\n                                gridTemplateColumns=\"repeat(2, 1fr)\"\n                                listStyleType=\"'â€£ '\"\n                                fontWeight=\"600\"\n                            />\n                        );\n                    },\n                    li: ({ node, ...props }) => {\n                        const { ordered, ...rest } = props;\n\n                        return <li data-aos=\"flip-up\" data-aos-delay={props.index * 100 + 400} {...rest} />;\n                    },\n                }}\n            >\n                {children as string}\n            </ReactMarkdown>\n        </Stack>\n    );\n};\n","import { FC } from \"react\";\n\nimport { Box, Text, useBreakpointValue } from \"@chakra-ui/react\";\n\ninterface Props {\n    text: {\n        mobile: string;\n        desktop: string;\n    };\n}\n\nexport const LogoType: FC<Props> = ({ text }) => {\n    const variant = useBreakpointValue({ base: text.mobile, md: text.desktop });\n\n    const handleClick = () => {\n        window.scrollTo({ top: 0, behavior: \"smooth\" })\n    }\n    return (\n        <Box\n            transition=\"all 0.2s ease-in-out\"\n            _hover={{ cursor: \"pointer\", color: \"primary.600\" }}\n            onClick={handleClick}\n        >\n            <Text fontSize={{ base: \"2xl\", md: \"3xl\" }} fontWeight=\"800\" lineHeight=\"1\" fontFamily=\"Outfit\" mb={{ base: 0, md: -2 }} color=\"accent.300\">\n                {variant}\n            </Text>\n        </Box>\n    );\n};\n","import { FC, useEffect } from \"react\";\nimport { HStack, IconButton, StyleProps, useColorMode, useColorModeValue } from \"@chakra-ui/react\";\nimport { bgDark, bgLight } from \"theme\";\nimport { MoonIcon, SunIcon } from \"utils/Icons\";\n\nexport const ColorModeButton: FC<StyleProps> = (props) => {\n    const { colorMode, toggleColorMode, setColorMode } = useColorMode();\n    const color = useColorModeValue(bgDark, bgLight);\n\n    // On initial load, check if there's a saved color mode in localStorage\n    useEffect(() => {\n        const savedColorMode = localStorage.getItem(\"colorMode\");\n        if (savedColorMode) {\n            // Set the Chakra UI color mode to match what's saved in localStorage\n            setColorMode(savedColorMode);\n        }\n    }, [setColorMode]);\n\n    // Toggle color mode\n    const handleToggle = () => {\n        // Toggle the Chakra color mode\n        toggleColorMode();\n\n        // Save the new color mode to localStorage\n        const newColorMode = colorMode === \"light\" ? \"dark\" : \"light\";\n        localStorage.setItem(\"colorMode\", newColorMode);\n\n        // Optional: For smooth UI transitions, scroll by a small amount\n        window.scrollBy(0, 1);\n        window.scrollBy(0, -1);\n    };\n\n    return (\n        <HStack {...props}>\n            <IconButton\n                aria-label=\"appearance\"\n                bg=\"transparent\"\n                color=\"yellow.300\"\n                fontSize=\"lg\"\n                _hover={{ bg: \"transparent\" }}\n                icon={colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n                variant=\"ghost\"\n                size=\"xs\"\n                onClick={handleToggle}\n                w=\"32px\"\n                h=\"32px\"\n            />\n        </HStack>\n    );\n};\n","import { FC, useRef } from \"react\";\n\nimport {\n    Box,\n    Button,\n    Drawer,\n    DrawerBody,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton,\n    useDisclosure,\n    IconButton,\n    StyleProps,\n    Flex,\n    VStack,\n    useColorModeValue,\n} from \"@chakra-ui/react\";\n\nimport { ColorModeButton } from \"shared/color-mode-button/ColorModeButton\";\nimport { AboutPageId, ProjectsPageId } from \"utils/useScroll\";\nimport { MenuIcon } from \"utils/Icons\";\nimport { Socials } from \"shared/socials/Socials\";\nimport { onResumeOpen } from \"utils/Functions\";\nimport { bgDark, bgLight } from \"theme\";\n\ninterface Props extends StyleProps {\n    onSectionClick: (section: string) => void;\n    currentPage: string;\n}\n\nexport const MenuDrawer: FC<Props> = ({ onSectionClick, currentPage, ...props }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const btnRef = useRef<any>(null);\n    const drawerBgColor = useColorModeValue(bgLight, bgDark);\n    const navItemColor = useColorModeValue(bgDark, bgLight);\n\n    return (\n        <Box {...props}>\n            <Button\n                as={IconButton}\n                variant=\"icon\"\n                ref={btnRef}\n                onClick={onOpen}\n                aria-label=\"open drawer\"\n                fontSize=\"lg\"\n                icon={<MenuIcon />}\n                px=\"0\"\n                color={navItemColor}\n            />\n            <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose} autoFocus={false}>\n                <DrawerOverlay />\n                <DrawerContent bg={drawerBgColor}>\n                    <DrawerHeader px=\"4\">\n                        <Flex justifyContent=\"space-between\">\n                            <ColorModeButton />\n                            <DrawerCloseButton position=\"relative\" top=\"0\" right=\"0\" />\n                        </Flex>\n                    </DrawerHeader>\n\n                    <DrawerBody>\n                        <VStack spacing=\"6\" my=\"16\">\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration=\"underline\"\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor={currentPage === ProjectsPageId ? \"secondary.400\" : \"transparent\"}\n                                onClick={() => {\n                                    onClose();\n                                    setTimeout(() => {\n                                        onSectionClick(ProjectsPageId);\n                                    }, 250);\n                                }}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"200\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                Projects\n                            </Button>\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === AboutPageId ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"secondary.400\"\n                                onClick={() => {\n                                    onClose();\n                                    setTimeout(() => {\n                                        onSectionClick(AboutPageId);\n                                    }, 250);\n                                }}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"300\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                Story\n                            </Button>\n                            <Button\n                                color=\"gray.400\"\n                                backgroundColor=\"secondary.400\"\n                                _hover={{ bg: `secondary.400` }}\n                                onClick={onResumeOpen}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"400\"\n                                fontWeight=\"600\"\n                                fontSize=\"2xl\"\n                            >\n                                Resume\n                            </Button>\n                        </VStack>\n                        <Flex justifyContent=\"center\" mt=\"16\">\n                            <Socials delay={100} resume={false} />\n                        </Flex>\n                    </DrawerBody>\n                </DrawerContent>\n            </Drawer>\n        </Box>\n    );\n};\n","import { FC } from \"react\";\n\nimport { Box, Button, Container, Flex, HStack, useColorModeValue, Tooltip } from \"@chakra-ui/react\";\n\nimport { configs } from \"shared/content/Content\";\nimport { LogoType } from \"shared/navbar/logo-type/LogoType\";\nimport { bgDark, bgLight } from \"theme\";\nimport { onResumeOpen } from \"utils/Functions\";\nimport { AboutPageId, useScroll, ProjectsPageId } from \"utils/useScroll\";\nimport { MenuDrawer } from \"./drawer/Drawer\";\nimport { ColorModeButton } from \"shared/color-mode-button/ColorModeButton\";\n\nexport const Navbar: FC = () => {\n    const bg = useColorModeValue(bgLight, bgDark);\n    const navItemColor = useColorModeValue(\"secondary.400\", \"secondary.400\");\n    const currentPage = useScroll();\n\n    const toSection = (section: string) => {\n        document.getElementById(section)?.scrollIntoView({ behavior: \"smooth\" });\n    };\n\n    return (\n        <Box bg={bg} position=\"fixed\" top=\"0\" w=\"100%\" left=\"50%\" transform=\"translate(-50%)\" zIndex=\"10\">\n            <Container py=\"4\" px=\"4\"\n                data-aos=\"fade-down\" data-aos-duration=\"500\" data-aos-delay=\"100\"\n            >\n                <Flex justifyContent=\"space-between\" alignItems=\"center\">\n                    <LogoType\n\n                        text={configs.common.logoType}\n\n                    />\n                    <Flex alignItems=\"center\" display={{ base: \"none\", md: \"flex\" }}>\n                        <HStack spacing=\"8\" mr=\"6\">\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration=\"underline\"\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor={currentPage === ProjectsPageId ? \"secondary.400\" : \"transparent\"}\n                                onClick={() => toSection(ProjectsPageId)}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"200\"\n                            >\n                                What I've Built\n                            </Button>\n                            <Button\n                                variant=\"link\"\n                                color={navItemColor}\n                                textDecoration={currentPage === AboutPageId ? \"underline\" : \"none\"}\n                                textDecorationThickness=\"2px\"\n                                textDecorationColor=\"secondary.400\"\n                                onClick={() => toSection(AboutPageId)}\n                                data-aos=\"fade\"\n                                data-aos-delay=\"300\"\n                            >\n                                The Road So Far\n                            </Button>\n                            <Tooltip\n                                key=\"Resume\"\n                                label=\"Download Resume\"\n                                textTransform=\"capitalize\"\n                                bg=\"highlight.200\"\n                                color=\"primary.400\"\n                            >\n                                <Button\n                                    // variant=\"link\" \n                                    onClick={onResumeOpen} data-aos=\"fade\" data-aos-delay=\"400\"\n                                    color=\"gray.400\"\n                                    backgroundColor=\"secondary.400\"\n                                    _hover={{ bg: `secondary.400` }}\n                                >\n                                    Resume\n                                </Button>\n                            </Tooltip>\n                        </HStack>\n                        <ColorModeButton />\n                    </Flex>\n\n                    <MenuDrawer\n                        currentPage={currentPage}\n                        onSectionClick={toSection}\n                        display={{ base: \"block\", md: \"none\" }}\n                    />\n                </Flex>\n            </Container>\n        </Box>\n    );\n};\n","import { FC } from \"react\";\n\nimport { Button, Stack, HStack, IconButton, Tooltip, useTheme } from \"@chakra-ui/react\";\n\nimport { configs } from \"shared/content/Content\";\nimport { onResumeOpen, open } from \"utils/Functions\";\nimport { FacebookIcon, GitHubIcon, InstagramIcon, LinkedInIcon, MailIcon, YoutubeIcon } from \"utils/Icons\";\n\nconst LinksToIconMapper: Record<string, JSX.Element> = {\n    linkedIn: <LinkedInIcon />,\n    gitHub: <GitHubIcon />,\n    facebook: <FacebookIcon />,\n    instagram: <InstagramIcon />,\n    youtube: <YoutubeIcon />,\n    email: <MailIcon />,\n};\n\ninterface Props {\n    resume?: boolean;\n    exclude?: Array<string>;\n    delay?: number;\n    color?: string;\n}\n\nexport const Socials: FC<Props> = ({ resume = true, exclude, delay = 800, color }) => {\n    const theme = useTheme();\n\n    return (\n        <Stack\n            spacing={{ base: 4, md: 4 }}  // Stack on mobile and align horizontally on larger screens\n            direction={{ base: \"column\", md: \"row\" }} // Stack vertically on mobile, horizontally on desktop\n            align={{ base: \"start\", md: \"start\" }}\n        >\n            {resume && (\n                <Tooltip\n                    key=\"Resume\"\n                    label=\"Download Resume\"\n                    textTransform=\"capitalize\"\n                    bg={theme.colors.highlight[200]}\n                    color={theme.colors.primary[400]}\n                >\n                    <Button\n                        data-aos=\"fade\"\n                        data-aos-delay={delay} size=\"lg\"\n                        borderRadius=\"md\"\n                        mr=\"2\"\n                        onClick={onResumeOpen}\n                        bg={theme.colors.secondary[400]}\n                        color={color || theme.colors.gray[200]}\n                        _hover={{ bg: theme.colors.secondary[400] }}\n                    >\n                        Check Out My Resume\n                    </Button>\n                </Tooltip>\n            )}\n            <HStack spacing=\"5\" wrap=\"wrap\" justify={{ base: \"center\", md: \"flex-start\" }}>\n                {configs.common.socials.map(\n                    (social, idx) =>\n                        !exclude?.includes(social.type) && (\n                            <Tooltip\n                                key={social.type}\n                                label={social.type}\n                                textTransform=\"capitalize\"\n                                bg={theme.colors.highlight[200]}\n                                color={theme.colors.primary[400]}\n                            >\n                                <Button\n                                    p=\"0\"\n                                    aria-label={`${social.type}-button`}\n                                    as={IconButton}\n                                    variant=\"icon\"\n                                    data-aos=\"fade\"\n                                    data-aos-delay={idx * 100 + delay}\n                                    fontSize={social.type === \"mail\" ? \"24pt\" : \"20pt\"}\n                                    icon={LinksToIconMapper[social.type]}\n                                    onClick={() => open(social.link)}\n                                    color={color || theme.colors.secondary[400]}\n                                    _hover={{ color: theme.colors.secondary[400], bg: \"transparent\" }}\n                                />\n                            </Tooltip>\n                        ),\n                )}\n            </HStack>\n        </Stack >\n    );\n};\n","import { configs } from \"shared/content/Content\";\n\nexport const open = (link: string) => window.open(link, \"_blank\");\n\nexport const onResumeOpen = () => {\n    open(configs.common.resume);\n};\n\nexport const onMailTo = () => {\n    open(\"mailto:\" + configs.common.email);\n};\n"],"names":["MarkdownFile","configs","common","landing","featuredProjects","otherProjects","about","Mapper","Landing","LandingMd","About","AboutMd","useContent","fileName","useState","data","setData","useEffect","fetch","then","res","text","LogoType","variant","useBreakpointValue","base","mobile","md","desktop","transition","_hover","cursor","color","onClick","window","scrollTo","top","behavior","fontSize","fontWeight","lineHeight","fontFamily","mb","ColorModeButton","props","useColorMode","colorMode","toggleColorMode","setColorMode","useColorModeValue","bgDark","bgLight","savedColorMode","localStorage","getItem","bg","icon","size","newColorMode","setItem","scrollBy","w","h","MenuDrawer","onSectionClick","currentPage","useDisclosure","isOpen","onOpen","onClose","btnRef","useRef","drawerBgColor","navItemColor","as","IconButton","ref","px","placement","autoFocus","justifyContent","position","right","spacing","my","textDecoration","textDecorationThickness","textDecorationColor","ProjectsPageId","setTimeout","AboutPageId","backgroundColor","onResumeOpen","mt","Socials","delay","resume","Navbar","useScroll","toSection","section","document","getElementById","scrollIntoView","left","transform","zIndex","py","alignItems","display","mr","label","textTransform","LinksToIconMapper","linkedIn","gitHub","facebook","instagram","youtube","email","exclude","theme","useTheme","direction","align","colors","highlight","primary","borderRadius","secondary","gray","wrap","justify","social","idx","includes","type","p","open","link","onMailTo"],"sourceRoot":""}